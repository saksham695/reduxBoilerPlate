[{"/Users/saksham-vs/reduxBoilerPlate/competition/src/store/StateProvider.js":"1","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/App.js":"2","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/reducer.js":"3","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/Card.js":"4","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/TodoTextComponent.js":"5","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/action.js":"6","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/InputComponent.js":"7","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/IconComponent.js":"8","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/ListItem.js":"9","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/utilities.js":"10","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/HashTagTextComponent.js":"11"},{"size":464,"mtime":1610131719115,"results":"12","hashOfConfig":"13"},{"size":200,"mtime":1621680244030,"results":"14","hashOfConfig":"15"},{"size":2950,"mtime":1621796375158,"results":"16","hashOfConfig":"15"},{"size":5376,"mtime":1621796548986,"results":"17","hashOfConfig":"15"},{"size":364,"mtime":1621765903705,"results":"18","hashOfConfig":"15"},{"size":392,"mtime":1621796346343,"results":"19","hashOfConfig":"15"},{"size":1014,"mtime":1621796793527,"results":"20","hashOfConfig":"15"},{"size":282,"mtime":1621796596816,"results":"21","hashOfConfig":"15"},{"size":2153,"mtime":1621795665006,"results":"22","hashOfConfig":"15"},{"size":515,"mtime":1621761087291,"results":"23","hashOfConfig":"15"},{"size":512,"mtime":1621765832995,"results":"24","hashOfConfig":"15"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k0p554",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zfizlr",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saksham-vs/reduxBoilerPlate/competition/src/store/StateProvider.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/App.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/reducer.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/Card.js",["50","51"],"import React, { useState, useEffect } from \"react\";\nimport { uuid } from \"uuidv4\";\n\nimport IconComponent from \"./IconComponent\";\nimport InputComponent from \"./InputComponent\";\nimport ListItem from \"./ListItem\";\nimport TodoTextComponent from \"./TodoTextComponent\";\nimport { ACTIONS } from \"../store/action\";\nimport { useStateValue } from \"../store/StateProvider\";\n\nimport \"./styles/Card.css\";\nimport HashTagTextComponent from \"./HashTagTextComponent\";\n\nexport default function Card() {\n  const [todoItem, onChangeTodo] = useState(\"\");\n  const [hashTag, setHashTag] = useState(\"\");\n  const [\n    {\n      completedTask,\n      hashtagStack,\n      searchedCompletedTask,\n      searchedTodoTask,\n      todoList,\n    },\n    dispatch,\n  ] = useStateValue();\n\n  useEffect(() => {\n    const storedData = sessionStorage.getItem(\"data\");\n    dispatch({\n      type: ACTIONS.GET_SESSION_DATA,\n      payload: JSON.parse(storedData),\n    });\n  }, []);\n\n  useEffect(() => {\n    const data = {\n      completedTask: [...completedTask],\n      hashtagStack: [...hashtagStack],\n      todoList: [...todoList],\n    };\n    sessionStorage.setItem(\"data\", JSON.stringify(data));\n  }, [completedTask, todoList]);\n\n  const onTodoItemChange = (e) => {\n    onChangeTodo(e.target.value);\n  };\n\n  const addTodoList = (e) => {\n    e.preventDefault();\n    const payload = {\n      completed: false,\n      id: new Date().getTime(),\n      todo: todoItem,\n    };\n    dispatch({\n      payload,\n      type: ACTIONS.ADD_TO_LIST,\n    });\n    onChangeTodo(\"\");\n  };\n\n  const removeCurrentTask = () => {\n    onChangeTodo(\"\");\n  };\n\n  const onAddHashtagToStack = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: ACTIONS.ADD_HASHTAG,\n      payload: { tag: hashTag, id: new Date().getTime() },\n    });\n    setHashTag(\"\");\n  };\n\n  const onHashtagChange = (e) => {\n    setHashTag(e.target.value);\n  };\n\n  const onRemoveHashtags = () => {\n    dispatch({\n      type: ACTIONS.REMOVE_HASHTAGS,\n    });\n  };\n  const resetState = () => {\n    dispatch({\n      type: ACTIONS.RESET_TO_DO_LIST,\n    });\n  };\n\n  const renderCardHeader = () => {\n    return (\n      <div className=\"card-header\">\n        <TodoTextComponent\n          text=\"To do list\"\n          customStyle={{ color: \"rgb(129,129,129)\", fontSize: 22 }}\n        />\n        <div style={styles.resetButtonContainerStyle} onClick={resetState}>\n          <IconComponent\n            customStyle={{ color: \"rgb(0,204,123)\" }}\n            iconName=\"refresh\"\n          />\n          <TodoTextComponent\n            customStyle={styles.resetButtonTextStyle}\n            text=\"Reset All Tasks\"\n          />\n        </div>\n      </div>\n    );\n  };\n\n  const renderInputComponent = () => {\n    return (\n      <div>\n        {INPUT_DATA.map(\n          ({\n            key,\n            onHandleChange,\n            onHandleSubmit,\n            onIconClicked,\n            icon,\n            placeholder,\n            type,\n            value,\n          }) => {\n            return (\n              <div key={key} className=\"input-container\">\n                <InputComponent\n                  onHandleChange={onHandleChange}\n                  onHandleSubmit={onHandleSubmit}\n                  placeholder={placeholder}\n                  icon={icon}\n                  type={type}\n                  value={value}\n                  onIconClicked={onIconClicked}\n                />\n              </div>\n            );\n          }\n        )}\n      </div>\n    );\n  };\n\n  const INPUT_DATA = [\n    {\n      key: \"il1\",\n      onHandleChange: onTodoItemChange,\n      onHandleSubmit: addTodoList,\n      placeholder: \"+  Add a task\",\n      type: \"input\",\n      value: todoItem,\n      icon: \"close\",\n      onIconClicked: removeCurrentTask,\n    },\n    {\n      key: \"il2\",\n      onHandleChange: onHashtagChange,\n      onHandleSubmit: onAddHashtagToStack,\n      placeholder: \"Search with hashtags\",\n      type: \"input\",\n      value: hashTag,\n      icon: \"refresh\",\n      onIconClicked: onRemoveHashtags,\n    },\n  ];\n\n  return (\n    <div className=\"card-dimension\" style={{ borderRadius: 10 }}>\n      {renderCardHeader()}\n      {renderInputComponent()}\n      {!!hashtagStack.length && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\",\n            marginTop: \"1%\",\n            justifyContent: \"normal\",\n          }}\n        >\n          {hashtagStack.map((item) => {\n            return <HashTagTextComponent text={item.tag} key={uuid()} />;\n          })}\n        </div>\n      )}\n      <div style={{ paddingTop: \"2.5%\", paddingBottom: \"2.5%\" }}>\n        {((hashtagStack || []).length ? searchedTodoTask : todoList || []).map(\n          (item) => (\n            <ListItem item={item} key={uuid()} />\n          )\n        )}\n        <TodoTextComponent text=\"Completed\" customStyle={{ marginTop: \"1%\" }} />\n        {((hashtagStack || []).length\n          ? searchedCompletedTask\n          : completedTask || []\n        ).map((item) => (\n          <ListItem item={item} key={uuid()} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  resetButtonContainerStyle: {\n    alignItems: \"center\",\n    backgroundColor: \"rgb(232,249,241)\",\n    borderRadius: 20,\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginTop: \"4%\",\n    padding: 10,\n  },\n\n  resetButtonTextStyle: {\n    color: \"rgb(0,204,123)\",\n    marginLeft: 10,\n  },\n};\n","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/TodoTextComponent.js",["52"],"import React from \"react\";\nimport HashTagTextComponent from \"./HashTagTextComponent\";\n\nexport default function TodoTextComponent({ text = \"\", customStyle = {} }) {\n  return (\n    <div style={customStyle}>\n      {text}\n      {/* {modifiedText.map((text) => {\n        text.includes(\"#\") ? text : <HashTagTextComponent text={text} />;\n      })} */}\n    </div>\n  );\n}\n","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/action.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/InputComponent.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/IconComponent.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/ListItem.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/utilities.js",["53","54"],"export const getSearchedData = (list, updateHashTagList) => {\n  const filteredList = [];\n  list.map((todoItem) => {\n    let check = 0;\n    (updateHashTagList || []).map((item) => {\n      if (!check && todoItem.todo.includes(item.tag)) {\n        check = 1;\n        filteredList.push(todoItem);\n      }\n    });\n  });\n  return filteredList;\n};\n\nexport const sortTodoList = (task1, task2) => {\n  const todoTask1 = task1.id;\n  const todoTask2 = task2.id;\n  if (todoTask1 > todoTask2) {\n    return -1;\n  }\n  return 1;\n};\n","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/HashTagTextComponent.js",[],{"ruleId":"55","severity":1,"message":"56","line":34,"column":6,"nodeType":"57","endLine":34,"endColumn":8,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":43,"column":6,"nodeType":"57","endLine":43,"endColumn":31,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":3,"column":23,"nodeType":"67","messageId":"68","endLine":3,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":5,"column":42,"nodeType":"67","messageId":"68","endLine":5,"endColumn":44},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has a missing dependency: 'hashtagStack'. Either include it or remove the dependency array.",["70"],"no-unused-vars","'HashTagTextComponent' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [dispatch]",{"range":"75","text":"76"},"Update the dependencies array to be: [completedTask, hashtagStack, todoList]",{"range":"77","text":"78"},[931,933],"[dispatch]",[1157,1182],"[completedTask, hashtagStack, todoList]"]