[{"/Users/saksham-vs/reduxBoilerPlate/competition/src/store/StateProvider.js":"1","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/App.js":"2","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/reducer.js":"3","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/Card.js":"4","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/TodoTextComponent.js":"5","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/action.js":"6","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/InputComponent.js":"7","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/IconComponent.js":"8","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/ListItem.js":"9"},{"size":464,"mtime":1610131719115,"results":"10","hashOfConfig":"11"},{"size":200,"mtime":1621680244030,"results":"12","hashOfConfig":"13"},{"size":3184,"mtime":1621758758518,"results":"14","hashOfConfig":"13"},{"size":4011,"mtime":1621751215878,"results":"15","hashOfConfig":"13"},{"size":155,"mtime":1621671690081,"results":"16","hashOfConfig":"13"},{"size":314,"mtime":1621758849935,"results":"17","hashOfConfig":"13"},{"size":725,"mtime":1621716102004,"results":"18","hashOfConfig":"13"},{"size":282,"mtime":1621708481442,"results":"19","hashOfConfig":"13"},{"size":1770,"mtime":1621750780180,"results":"20","hashOfConfig":"13"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k0p554",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zfizlr",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/saksham-vs/reduxBoilerPlate/competition/src/store/StateProvider.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/App.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/reducer.js",["40","41"],"import { ACTIONS } from \"./action\";\n\nexport const initialState = {\n  todoList: [],\n  completedTask: [],\n  hashtagStack: [],\n  searchedTodoTask: [],\n  searchedCompletedTask: [],\n};\n\nconst getSearchedData = (list, updateHashTagList) => {\n  const filteredList = [];\n  list.map((todoItem) => {\n    let check = 0;\n    (updateHashTagList || []).map((item) => {\n      if (!check && todoItem.todo.includes(item.tag)) {\n        check = 1;\n        filteredList.push(todoItem);\n      }\n    });\n  });\n  return filteredList;\n};\n\nexport const reducer = (state, action) => {\n  const { payload, type } = action;\n  console.log(type);\n  switch (type) {\n    case ACTIONS.ADD_TO_LIST:\n      return {\n        ...state,\n        todoList: [...state.todoList, payload],\n      };\n\n    case ACTIONS.RESET_TO_DO_LIST:\n      return {\n        ...state,\n        todoList: [],\n        completedTask: [],\n        hashtagStack: [],\n      };\n\n    case ACTIONS.ITEM_COMPLETED: {\n      return {\n        ...state,\n        todoList: state.todoList.filter((item) => item.id !== payload.id),\n        completedTask: [...state.completedTask, payload],\n      };\n    }\n\n    case ACTIONS.NOT_COMPLETED:\n      return {\n        ...state,\n        todoList: [...state.todoList, payload],\n        completedTask: state.completedTask.filter(\n          (item) => item.id !== payload.id\n        ),\n      };\n\n    case ACTIONS.SEARCHED_TODO_COMPLETED: {\n      const updatedSearchedTodoTask = state.searchedTodoTask.filter(\n        (item) => item.id !== payload.id\n      );\n      const searchedCompletedTask = [...state.searchedCompletedTask, payload];\n      console.log(\"updatedSearchedTodoTask\", updatedSearchedTodoTask);\n      console.log(\"searchedCompletedTask\", searchedCompletedTask);\n      return {\n        ...state,\n        searchedTodoTask: updatedSearchedTodoTask,\n        searchedCompletedTask: searchedCompletedTask,\n      };\n    }\n\n    case ACTIONS.SEARCHED_TODO_NOT_COMPLETED:\n      const updatedSearchedTodoTask = [...state.searchedTodoTask, payload];\n\n      const searchedCompletedTask = state.searchedCompletedTask.filter(\n        (item) => {\n          console.log(\"should include\", item.id !== payload.id);\n          return item.id !== payload.id;\n        }\n      );\n\n      console.log(\n        \"updatedSearchedTodoTask SEARCHED_TODO_NOT_COMPLETED\",\n        updatedSearchedTodoTask\n      );\n      console.log(\n        \"searchedCompletedTask SEARCHED_TODO_NOT_COMPLETED\",\n        searchedCompletedTask\n      );\n\n      return {\n        ...state,\n        searchedTodoTask: updatedSearchedTodoTask,\n        searchedCompletedTask: searchedCompletedTask,\n      };\n\n    case ACTIONS.ADD_HASHTAG: {\n      const updateHashTagList = [...state.hashtagStack, payload];\n      const todoList = getSearchedData(state.todoList, updateHashTagList);\n      const completedTodoList = getSearchedData(\n        state.completedTask,\n        updateHashTagList\n      );\n      console.log(\"reduces\", todoList);\n      return {\n        ...state,\n        hashtagStack: updateHashTagList,\n        searchedTodoTask: todoList,\n        searchedCompletedTask: completedTodoList,\n      };\n    }\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n","/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/Card.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/TodoTextComponent.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/store/action.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/InputComponent.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/IconComponent.js",[],"/Users/saksham-vs/Documents/todo/reduxBoilerPlate/competition/src/components/ListItem.js",["42"],{"ruleId":"43","severity":1,"message":"44","line":13,"column":23,"nodeType":"45","messageId":"46","endLine":13,"endColumn":25},{"ruleId":"43","severity":1,"message":"44","line":15,"column":42,"nodeType":"45","messageId":"46","endLine":15,"endColumn":44},{"ruleId":"47","severity":1,"message":"48","line":67,"column":7,"nodeType":"49","messageId":"50","endLine":67,"endColumn":24},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'CheckBoxComponent' is assigned a value but never used.","Identifier","unusedVar"]